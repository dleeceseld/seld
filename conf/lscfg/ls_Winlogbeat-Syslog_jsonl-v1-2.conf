# Author Doug Leece  dleece @ firstfiretech dot ca 
# Feb 20/2023 A Logstash "reciever appliance " to collect event data from Windows systems running the Winlogbeat agent
#       and syslog events from networking devices or Linux auth/authpriv forwarding
#       Allows collection from multiple systems without the need to extract  EVTX files, /var/log/auth.log|secure etc from each system
#       collection can also be limited to specific events defined at each agent or dropped by filtering statements 
#       in this logstash configuration file. (See commented section)
#
#       By default Winlogbeat includes extra meta data and ECS field names for certain elements.
#       To keep the Widnows event logs as close to original as possible while enabling central collection
#       the source agents must be modified to extract the log as XML and write it to a json like field called winlog.
#       
#       The winlog field can be extracted and written to a file without any additional data needed from 
#       the beats input.  

#  Example of winlogbeat  config mods,  define the processor 
#  and then locate each of the logs to be collected and set include_xml to be true
#
#  processors:
#  - decode_xml_wineventlog:
#      field: event.original
#      target_field: winlog
#
# winlogbeat.event_logs:
#  - name: Security
#     include_xml: true
#     ignore_older: 168h
# ...  remaining config settings 

#   Syslog daemon configuration modidfifications will be required on each contributng Linux and networking source
#   for rsyslogd on linux locate the syslog config rules and add an addtional line at the top of the rules
#   authpriv.*    @@applince-ip  ( Centos/REHL/Oracle)
#   auth,authpriv.*    @@applince-ip  ( Ubuntu)
#
#   Modify firewall logging config to include a remote host, transport will be syslog. Test logging ouptut
#   to ensure it includes the source firewall IP or hostname. PFSense required a change to 5424 format from
#   default 3164 to ensure hostname was included.  Knowing the source of the event is crucial in centralized 
#   logging solutions. 
#
#       This appliance will strip out the Elastic meta-data creating JSON lines for Windows events and syslog
#       files will have one message per line, prepended by the PRI number but otherwise identical to the original file.  
#       JSON can also be used as a file input on many systems, allowing for good system interoperabilioty
#

####################################  Input section ######################################
input {
  beats {
    port => 5044
    codec => json
    type => "centralEvtx"
    }
  syslog {
    port => 514
    type => "centralSyslog"
    # Format for 5424 syslog as generated by pfsense 2.6
    grok_pattern => "<%{POSINT:syslogpri}>%{POSINT:version}%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{IPORHOST:hostname}%{SPACE}%{WORD:[process][name]}%{SPACE}%{POSINT:[process][pid]}%{SPACE}%{GREEDYDATA:rfc5424msg_pfsense}"
    
  }
}
# Need to deal with multiple syslog variants,  grok pattern in syslog accepts one string so put
# all remaining possible patterns in an array and remove grok parsing failure tag if successful.
filter {
  if "_grokparsefailure_sysloginput" in [tags] {
    grok {
      match => {
        "message" => [
        "^<%{POSINT:[log][syslog][facility][code]:int}>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:host_name}%{SPACE}(?:%{WORD:[process][name]}%{SPACE}\[%{POSINT:[process][id]}\]?|%{WORD:[program][name]}):%{SPACE}1%{SPACE}%{TIMESTAMP_ISO8601:[source][timestamp]}%{SPACE}%{GREEDYDATA:rfc5424fwd_linux}",
        "^<%{POSINT:[log][syslog][facility][code]:int}>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:host_name}%{SPACE}1%{SPACE}%{TIMESTAMP_ISO8601:[source][timestamp]}%{SPACE}%{GREEDYDATA:rfc5424fwd_linux}",
        "^<%{POSINT:[log][syslog][facility][code]:int}>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:host_name}%{SPACE}(?:%{WORD:[process][name]}%{SPACE}\[%{POSINT:[process][id]}\]?|%{WORD:[program][name]}):%{SPACE}%{GREEDYDATA:rfc3164msg_linux}",
        "^<%{POSINT:[log][syslog][facility][code]:int}>%{SYSLOGTIMESTAMP:timestamp}%{SPACE}%{SYSLOGHOST:host_name}%{SPACE}%{WORD:progam_name}:%{SPACE}%{GREEDYDATA:rfc3164msg_linux-nopid}"
        ]
      }
    }
  }
  
  # Remove grok parse failure tags for pattern matches in the follow on filter,  
  # allows monitoring initial ingest
  if [rfc3164msg_linux] {
     mutate { add_tag => "rfc3164_linux" }
     mutate { remove_tag => ["_grokparsefailure_sysloginput"] }
     mutate { gsub => ["message", "[\\\n]", ""] } 
  }
  # Update tags if RFC5424 field created
  if [rfc5424fwd_linux] {
     mutate { add_tag => "rfc5424_linux" }
     mutate { gsub => ["message","[\\\n]",""]}
     mutate { remove_tag => ["_grokparsefailure_sysloginput"] }
  }
}  # End syslog multi pattern filter

#################################   Pre-deident processing #############################

# Context and log specifc examples below would need vetting
# Drop high noise or low value events
#
#filter {
#  # Do not collect log off events
#  if [winlog][event_id] == "4634" { drop {}  }
#  
#}


# Remove the newline character added to all Rsyslog sources using TCP transport (Avoid blank lines)
# If UDP there will be no newline and the gsub will just quietly ignore the error
#filter {
#  if [type] == "centralSyslog" and [rfc3164msg_linux] {
#    #mutate{ gsub => ["message", "[\\\n]", ""]}
#    mutate { add_tag => "gsub_filter}"}
#  }
#}

##################################  Output Section #####################################
# JSON Line file output limited to orignal source event only,  logstash meta data excluded from lines
# Raw files should then be processed in deidentifation pipeline. 

output {
  # uncomment for testing & debuging analysis
  stdout { codec => rubydebug }
  
  # extracting just the winlog data to the file,
  # would eliminate the need to clear up all the other fields as well then
  if [type] == "centralEvtx" and [winlog] {
    file { path => "/var/tmp/winevts.jsonl-%{+YYYY-MM-dd}"
        codec => line { format => '%{winlog}'}
    }  
  }

  # Linux Auth Log syslog formatted events
  # PFSense
  if [type] == "centralSyslog" and [process][name] == "filterlog" {
    file { path => "/var/tmp/fwsyslog.log-%{+YYYY-MM-dd}"
        codec => line { format => '%{message}'}
    }  
  }

  # Linux RFC3164 ( Centos, Ubuntu Rsyslog tested)
  if [type] == "centralSyslog" and [rfc3164msg_linux] {
    file { path => "/var/tmp/linux3164.log-%{+YYYY-MM-dd}"
        codec => line { format => '%{message}'}
    }  
  }
  # Linux RFC5424_FWD ( Centos, Ubuntu Rsyslog forwardings of logger message)
  if [type] == "centralSyslog" and [rfc5424fwd_linux] {
    file { path => "/var/tmp/linux5424-remhist-v0.log-%{+YYYY-MM-dd}"
        codec => line { format => '%{message}'}
    }  
  }

  # Record Syslog ingest errors in seperate file
  if [type] == "centralSyslog" and "_grokparsefailure_sysloginput" in [tags] {
    file { path => "/var/tmp/syslog_msg-parse-errors.log-%{+YYYY-MM-dd}"
        codec => line { format => '%{message}'}
    }  
  }

}  # end output filter
