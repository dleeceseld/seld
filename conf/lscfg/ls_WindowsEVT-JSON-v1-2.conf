# Author Doug Leece  dleece @ firstfiretech dot ca 
# Jan 21/2022 Inital POC configuration to develop parsers and deidentification modules
# 
# Ingest Windows Event logs collected using Winlogbeats via logstash and written to JSON file format to retain 
# Windows hierarchical stucture
#
# This configuration uses the Elastic/Logstash file input plugin, making it suitable for 
# deidentifiying a JSON log from one or more Windows hosts collected via logstash,  before sending to a third party for analysis.
#  Feb 2/2023  Extended ruby scripts to include SID, User, Domain, compuer host and the event description message string
#              IP data outstanding,  require new event IDs
#  Mar 23/2023 Adding Powershell command line parsing
#  Apr 2/2023  Moved all files under /opt/seld 
#  Apr 4/2023  Majority of Windows events selected for processing or dropping

#
# Currently the path is hardcoded but can uses a wildcard after "winevets.json"  to enable ingestiong 
# of any JSON logs in the defined directory, allowing from different systems and different
# naming strategies (example below). Intended for use on local auth.log rather than 
# log events collected via syslog forwarding. 
#
#  eg   winevt.json-windev28_20221217 , winevt.json-Oracle-QA_Wednesday

# Built using GROK patterns published by Elasticsearch
# https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/ecs-v1/grok-patterns
#
# Extracted field names aligned to Elastic Common Schema
# https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html



# Added for repeat testing,  may not be needed for release ()
input {
        file {
                path => "/opt/seld/rawlogs/winevts.json*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/winevt_processing.log"
                exit_after_read => true
                sincedb_path => "/opt/seld/tmp/winevtlog_tracker"
                sincedb_clean_after => 0.00135
        }
} # End input

# Filter notes, & import pattern files 
# Convert JSON doc into field based data
filter { 
  json { source => "message"  
          target => "winlog"
          add_tag => "_json_parsed_success"
  }
}

# Remove collection artifacts
filter{
  mutate {
    remove_field => ["[host]","[log]","[@version]","[message]","[ecs]","[event]"]
  }
  
}
# Correct the timestamp
filter {
  if [winlog][time_created] {
      date{
        match => ["[winlog][time_created]", "yyyy-MM-dd'T'HH:mm:ss'.'SSSZ"]
        target => "@timestamp"
        add_tag => "timestamp_original"
      }
  }
}

# Drop high noise or low value events
#
filter {
  
  # Do not collect log off events
  if [winlog][event_id] == "4634" { drop {}  }
  # Auditing policy changes is generating ~4% of all events, capturing OS made changes like patching updates,
  # Filter out Windows Updates
  if [winlog][provider_guid] == "{945A8954-C147-4ACD-923F-40C45405A658}"{ drop{} }
  # Windows firewall messages , very high volume
  if [winlog][event_id] == "7036" and [winlog][provider_guid] == "{555908d1-a6d7-4695-8e1e-26931d2012f4}" {
    drop {}
  }
  # Drop this event to allow all other policy changes to be captured
  if [winlog][event_id] == "4907" and [winlog][event_data][ObjectType] == "File"  { drop {}  }
  # Drop DCOM permission events 10016 
  if [winlog][provider_name] == "Microsoft-Windows-DistributedCOM" and ([winlog][event_id] == "10016" ){drop {} }
  # Drop computer account changes -- assumed admin action
  if [winlog][event_id] == "4742" { drop {}  }
  # Ignore system shutdown events
  if [winlog][provider_guid] == "{b0aa8734-56f7-41cc-b2f4-de228e98b946}" and [winlog][event_id] == "1074" { drop{} }
  # Ignore computer account password changes
  if [winlog][provider_name] == "NETLOGON" and [winlog][event_id] == "5823" { drop{} }  
  # Drop NTP informational messages
  if [winlog][channel] == "System" and ( [winlog][event_id] == "37" or [winlog][event_id] == "35" ) {
    drop{}
  }
  # Drop kernel messages related to software updates
  if [winlog][provider_guid] == "{a68ca8b7-004f-d7b6-a698-07e2de0f1f5d}" and  [winlog][event_id] == "16"  {
    drop{}
  }
  # Drop Group policy application events 
  if [winlog][provider_name] == "Microsoft-Windows-GroupPolicy" and ([winlog][event_id] == "1500" or [winlog][event_id] == "1501" or [winlog][event_id] == "1502" ){
    drop {}
  }
  # Drop events related to credential manager access, ~3% of all events
  if [winlog][provider_guid] == "{54849625-5478-4994-a5ba-3e3b0328c30d}" and ([winlog][event_id] == "5379" or [winlog][event_id] == "4695" or [winlog][event_id] == "5381"  or [winlog][event_id] == "5382"  ) { drop {}  }
  # Drop powershell on/off legacy logging since script block logging is enabled
  if [winlog][channel] == "Windows PowerShell" { drop {} }
  
  # Intented to detect enumerating local group membership 4799 or users 4798. Very high false positive rate -- drop all but net
  if [winlog][event_id] == "4799" and [winlog][event_data][CallerProcessName] !~ /^\w:\\Windows\\System32\\net1.exe/   { 
    drop {}  
  }
  if [winlog][event_id] == "4798" and [winlog][event_data][CallerProcessName] !~ /^\w:\\Windows\\System32\\net1.exe/   { 
    drop {}  
  }
  # Informational system messages
  if [winlog][channel] == "System" and ([winlog][event_id] == "1056" or [winlog][event_id] == "3260" or [winlog][event_id] == "5774" ) {
    drop {}
  }
  if [winlog][channel] == "System" and ([winlog][event_id] == "4200" or [winlog][event_id] == "3260" or [winlog][event_id] == "5774" ) {
    drop {}
  }
  #
  if [winlog][channel] == "System" and ([winlog][event_id] == "10154" or [winlog][event_id] == "1014" or [winlog][event_id] == "6011" )  {
    drop { }
  }
  if [winlog][channel] == "System" and ([winlog][event_id] == "16" or [winlog][event_id] == "4096" or [winlog][event_id] == "4097" or [winlog][event_id] == "44" )  {
    drop { }
  }
  # Informational security messages 
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4719" or [winlog][event_id] == "5058" or [winlog][event_id] == "4797" )  {
    drop { }
  }
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4694" or [winlog][event_id] == "4692" or [winlog][event_id] == "4738" )  {
    drop { }
  }
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4741" or [winlog][event_id] == "4739" or [winlog][event_id] == "4616"   )  {
    drop { }
  }
  if [winlog][channel] == "Security" and ([winlog][event_id] == "5061" or [winlog][event_id] == "5059" or [winlog][event_id] == "4696"  )  {
    drop { }
  }
  # System startup related messages that wind up in Security
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4826" or [winlog][event_id] == "4902"   )  {
    drop { }
  }
   # SSP noise
  if [winlog][channel] == "Application" and ([winlog][event_id] == "16384" or [winlog][event_id] == "16394" )  {
    drop { }
  }
  # user desktop customization info messages
  if [winlog][channel] == "Application" and ([winlog][event_id] == "5" or [winlog][event_id] == "1014" or [winlog][event_id] == "5774" )  {
    drop { }
  }
  # user desktop customization info messages
  if [winlog][channel] == "Application" and ([winlog][event_id] == "455" or [winlog][event_id] == "4625" or [winlog][event_id] == "1001" )  {
    drop { }
  }
}

# deidentification filters, add tags based on content
filter {
  # computer likely always in record
  if [winlog][computer_name] or [winlog][event_data][WorkstationName] or [winlog][event_data][Workstation]{
    mutate { add_tag => "winevt_computer" }
  }
  # most winevt records will have username attributes
  if [winlog][event_data][TargetUserName] or [winlog][event_data][SubjectUserName] or [winlog][event_data][ServiceName] or [winlog][event_data][SamAccountName] {
    mutate { add_tag => "winevt_user"}
  } 
  # Windows records a lot of domain information
  if [winlog][event_data][TargetDomainName] or [winlog][event_data][SubjectDomainName] {
    mutate { add_tag => "winevt_domain"}
  }
  # Windows records may contain sensitive IP addresses, loopback and blanks excluded in module
  if [winlog][event_data][IpAddress] {
    mutate { add_tag => "winevt_ipaddress"}
  }
  # SID may be considered a sensitive field ( module tests and ignores well-known, deidents domain sids & rids)
  if [winlog][event_data][SubjectUserSid] or [winlog][event_data][TargetUserSid] or [winlog][event_data][ServiceSid]{
    mutate { add_tag => "winevt_sid"}
  }
  # Privilege list, no deidentification needed just feild clean up
  if [winlog][event_data][PrivilegeList] {
    mutate{ gsub => ["[winlog][event_data][PrivilegeList]", "[\\\t]", ""]}
    mutate{ gsub => ["[winlog][event_data][PrivilegeList]", "[\\\n]", " "]}
  }
  # confirm there is a message field that needs parsing becasue regex is expensive
  if [winlog][message]{
    mutate { add_tag => "winevt_msg"}
  }
  # Check for channel name powershell operational
  if [winlog][channel] == "Microsoft-Windows-PowerShell/Operational"{
    mutate { add_tag => "winevt_psoper"}
  }
  # process command line monitoring may disclose user name paths, 0.005% in sample - LS processing up front
  if [winlog][event_id] == "4688" and ([winlog][event_data][NewProcessName] =~ /^\w:\\Users\\.*/ or [winlog][event_data][ParentProcessName] =~ /^\w:\\Users\\.*/ ) {
    mutate { add_tag => "winevt_procuserdata"}
  }
  if [winlog][event_id] == "4688" and [winlog][event_data][CommandLine] =~ /^.*\\Users\\.*/  {
    mutate { add_tag => "winevt_cmduserdata"}
  }
  # Additional processing for account creation and modification events that may contain home directory data
  if [winlog][event_id] == "4720"  {
    mutate { add_tag => "winevt_usermodify"}
  }
  # Tag group changes for additional processing
  if [winlog][event_id] == "4732"  {
    mutate { add_tag => "winevt_groupmodify"}
  }
}


# Ruby module filters

# When there is no valid IP address but usernames and/ computer names were observed, proceed with the ruby module tailored to user or computer name deidentification
filter {
  if "winevt_computer" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/hostname_deident-winevt_ecs-v2.rb"
      script_params => {
        "compnamefield" => "[winlog][computer_name]"
        "wkstnnamefield" =>"[winlog][event_data][WorkstationName]"
        "wkstnfield" =>"[winlog][event_data][Workstation]"
        }
    }
  }
}

# Windows Event logs may have more than one username defined in event data,
# include full JSON path below
filter{
  if "winevt_user" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/acctname_deident-winevt_ecs-v2.rb"  
      script_params => {
        "tunamefield" => "[winlog][event_data][TargetUserName]"
        "sunamefield" => "[winlog][event_data][SubjectUserName]"
        "tsnamefield" => "[winlog][event_data][TargetServerName]"
        "tinfofield" => "[winlog][event_data][TargetInfo]"
        "tounamefield" => "[winlog][event_data][TargetOutboundUserName]"
        "svcnamefield" => "[winlog][event_data][ServiceName]"
        "samnamefield" => "[winlog][event_data][SamAccountName]"
      }
    }
  }
}

# Windows Event logs may have more than one user or domain SID defined in event data,
# need to include the top level json object in the event data path
filter{
  if "winevt_sid" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/sid_deident-winevt_ecs-v2.rb"  
      script_params => {
        "tgtusidfield" => "[winlog][event_data][TargetUserSid]"
        "subusidfield" => "[winlog][event_data][SubjectUserSid]"
        "svcsidfield" => "[winlog][event_data][ServiceSid]"
        "tgtsidfield" => "[winlog][event_data][TargetSid]"
      }
    }
  }
}

# Windows Event logs may have more than one domain defined in event data,
# need to include the top level json object in the event data path
filter{
  if "winevt_domain" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/domname_deident-winevt_ecs-v2.rb"  
      script_params => {
        "tdname" => "[winlog][event_data][TargetDomainName]"
        "sdname" => "[winlog][event_data][SubjectDomainName]"
      }
    }
  }
}

# Windows Event logs may have more than one user or domain SID defined in event data,
# need to include the top level json object in the event data path
filter{
  if "winevt_ipaddress" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/ip64port_deident-winevt-v2.rb"  
      script_params => {
        "ipaddressfield" => "[winlog][event_data][IpAddress]"
        "portnumberfield" => "[winlog][event_data][IpPort]"
      }
    }
  }
}

# remove visual formatting from messages
# Windows Event Log messages will need also regex parsing to deidentify sensitive field data. 
# Include event ID to limit regex complexity
filter {
  if "winevt_msg" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/msg_sans-format-v2.rb"
      script_params => {
        "eventidfield" => "[winlog][event_id]"
      }
    }
  }
}

# Group modications can be significant to security posture, include change events in POC

filter{
  if "winevt_groupmodify" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/groupmodify_deident-winevt.rb"  
      script_params => {
        "membersidfield" => "[winlog][event_data][MemberSid]"
        "membernamefield" => "[winlog][event_data][MemberName]"
      }
    }
  }
}

# Process monitoring in Windows can contain usernames in the path which could be deidentified in other fields, exposing crypto,
# Only a small percentage of records so treat seperately to improve performance
filter{
  if "winevt_cmduserdata" in [tags] or "winevt_procuserdata" in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/cmduserdata_deident-winevt_ecs-v2.rb"  
      script_params => {
        "newprocessnamefield" => "[winlog][event_data][NewProcessName]"
        "parentprocessnamefield" => "[winlog][event_data][ParentProcessName]"
        "commandlinefield" => "[winlog][event_data][CommandLine]"
      }
    }
  }
}

# Powershell script block logging places user and SID in different location
filter {
    if "winevt_psoper" in [tags] {
        ruby {
            path => "/opt/seld/conf/modules/psoper_deident-winevt_ecs-v2.rb"
            script_params => {
                "useridentifierfield" => "[winlog][user][identifier]"
                "usernamefield" => "[winlog][user][name]"
                "userdomainfield" => "[winlog][user][domain]"
            }
        }
    }
}


###################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## File output section #############################################################
if "_json_parsed_success" in [tags] {
    file { path => "/opt/seld/deidentlogs/deident-windowsevt.json" 
      codec => line { format => '%{[winlog]}' }      
    }
  }

# End of output filter
}