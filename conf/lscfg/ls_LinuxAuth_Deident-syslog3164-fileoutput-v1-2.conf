# Author Doug Leece  dleece @ firstfiretech dot ca 
# Dec 17/2022 Inital POC configuration to develop parsers and deidentification modules
# Jan 04/2023 Converted field types to Elastic Common Schema
# Feb 26/2023 Modified input to include Network based Linux syslog. Testing regex with Oracle & Centos
# Apr 7/2023 Change logging paths to new default home, /opt/seld/

# Ubuntu Linux Auth Log ingestion and field parsing configuration file for Logstash, 
# Linux auth.log contains many events typically required for cyber security investigation
# providing good utility almost immediately.
#
# This configuration uses the Elastic/Logstash file input plugin, making it suitable for 
# deidentifiying a log from a Linux host before sending to a third party for analysis and could
# be easily extended to analyze logs from a centralized syslog collector.
#
# Currently the path is hardcoded but can uses a wildcard after "auth.log"  to enable ingestiong 
# of any authlogs in the defined directory, allowing from different systems and different
# naming strategies (example below). Intended for use on local auth.log rather than 
# log events collected via syslog forwarding. 
#
#  eg   auth.log-lindev28_20221217 , auth.log-Oracle-QA_Wednesday

# Built using GROK patterns published by Elasticsearch
# https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/ecs-v1/grok-patterns
#
# Extracted field names aligned to Elastic Common Schema
# https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html


# Added for repeat testing,  may not be needed for release ()
input {
        file {
                path => "/opt/seld/rawlogs/linux3164.log*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/authlog_processing.log"
                exit_after_read => true
                sincedb_path => "/opt/seld/tmp/authlog_tracker"
                sincedb_clean_after => 0.00135
        }
} # End input

# Filtering steps, note requirement for custom pattern files 
# Extract program type
filter{
    grok{
        match => { 'message' => '^(?:<%{POSINT:[log][syslog][facility][code]:int}>%{SYSLOGTIMESTAMP:syslogts}|%{SYSLOGTIMESTAMP:syslogts})?%{SPACE}%{IPORHOST:host.name}%{SPACE}(?:%{WORD:[process][name]}%{SPACE}\[%{POSINT:[process][pid]}\]|%{WORD:[process][name]})?:%{GREEDYDATA:logdata}'}
    }
}

# Add tagging based on program name in the log,  this allows filtering of unidentified programs to make sure only log sources that are 
# deidentifiable are included in the output
filter {
  if [process][name] == "sudo" {
    mutate { add_tag => "authlog_sudo"}
  } else if [process][name] == "su" {
    mutate { add_tag => "authlog_sudo"}
  } else if [process][name] == "sshd" {
    mutate { add_tag => "authlog_sshd"}
  } else if [process][name] == "unix_chkpwd" {
    mutate { add_tag => "authlog_sshd"}
  } else if [process][name] == "systemd-logind" {
    mutate { add_tag => "authlog_logind"}
  } else if [process][name] == "login" {
    mutate { add_tag => "authlog_logind"}
  } else if [process][name] == "systemd" {
    mutate { add_tag => "authlog_systemd"}
  } else if [process][name] == "passwd"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "useradd"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "usermod"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "groupadd"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "groupmod"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "chage"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "chfn"{
    mutate { add_tag => "authlog_account"}
  } else if [process][name] == "CRON"{
    mutate { add_tag => "authlog_cron"}
  } else if [process][name] == "polkitd"{
    mutate { add_tag => "osproc_hnlv"}
  } else {
    mutate { add_tag => "authlog_unprocessed"}
  }
}

####################################################   Custom field matching ###########################################################
# Note, GROK patterns are managed through the file grok-seld-custom-ecs.txt located in the patterns directory. Improperly parsed
#       records should be given a fill line pattern match and assigned a pattern name, call the pattern name user printf %{SOMEPATTERN}
#       This makes the code much easier to read an maintain. Also include any new patterns in the output section as well, data changes
#       made by SELD do not persist beyond the event being processed unless written to an output.   
#
filter {
  if "authlog_sshd" in [tags] {
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHIVU}'} add_tag => "sshd_authentication-ivu" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHIVU0}'} add_tag => "sshd_authentication-ivu0" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHIVU1}'} add_tag => "sshd_authentication-ivu1" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHDU}'} add_tag => "sshd_authentication-du" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHRST}'} add_tag => "sshd_authentication-rst" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHRST2}'} add_tag => "sshd_authentication-rst2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHIPU}'} add_tag => "sshd_authentication-ipu" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHIPO}'} add_tag => "sshd_authentication-ipo" }
    #grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHHST2}'} add_tag => "sshd_authentication-hst2" }
    #grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHHST1}'} add_tag => "sshd_authentication-hst1" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHPWD}'} add_tag => "sshd_authentication-pwd" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHPWD2}'} add_tag => "sshd_authentication-pwd2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHPWD3}'} add_tag => "sshd_authentication-pwd3" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHPWD4}'} add_tag => "sshd_authentication-pwd4" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHREV}'} add_tag => "sshd_authentication-rev" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHREV2}'} add_tag => "sshd_authentication-rev2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHAUTHPKY}'} add_tag => "sshd_authentication-pky" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESOPEN}'} add_tag => "sshd_session-opened" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSE}'} add_tag => "sshd_session-closed" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP}'} add_tag => "sshd_session-closed-ip" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP2}'} add_tag => "sshd_session-closed-ip2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP3}'} add_tag => "sshd_session-closed-ip3" }
    #grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP4}'} add_tag => "sshd_session-closed-ip4" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP5}'} add_tag => "sshd_session-closed-ip5" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHSESCLOSEIP6}'} add_tag => "sshd_session-closed-ip6" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIOAERROR}'} add_tag => "sshd_ioa-error"}
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIOAERROR2}'} add_tag => "sshd_ioa-error2"}
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIOAERROR3}'} add_tag => "sshd_ioa-error3"}
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIOAERROR4}'} add_tag => "sshd_ioa-error4"}
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIGNORE}'} add_tag => "sshd_nodeident" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIGNORE2}'} add_tag => "sshd_nodeident" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIGNORE3}'} add_tag => "sshd_nodeident" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHIGNORE4}'} add_tag => "sshd_nodeident" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHHNLV1}'} add_tag => "sshd_hnlv" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHHNLV2}'} add_tag => "sshd_hnlv" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHHNLV3}'} add_tag => "sshd_hnlv" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHHNLV4}'} add_tag => "sshd_hnlv" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SSHHNLV5}'} add_tag => "sshd_hnlv" }
  }
}
# High Noise, Low Value records that can be dropped rather 
filter {
    if "sshd_hnlv" in [tags] or "osproc_hnlv" in [tags] { drop{} } 
}


# Sudo events often have the person using sudo listed in a username, often indicator of priviledged access, therefore the account should be deidentified
filter{
  if "authlog_sudo" in [tags]{
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOSESCLOSE}'} add_tag => "sudo_session-closed" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOSESOPEN}'} add_tag => "sudo_session-opened" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOSESOPEN2}'} add_tag => "sudo_session-opened2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOCMD}'} add_tag => "sudo_command" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOAUTHF}'} add_tag => "sudo_authentication-failure" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOAUTHERR}'} add_tag => "sudo_authentication-error" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOAUTHF2}'} add_tag => "sudo_authentication-failure2" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUDOAUTHF3}'} add_tag => "sudo_authentication-failure3" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUSESSIONOPEN1}'} add_tag => "su_session-open1" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUSESSIONOPEN}'} add_tag => "su_session-open" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUSESSIONCLOSE}'} add_tag => "su_session-close" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUAUTH}'} add_tag => "su_authentication-success" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SUUSER}'} add_tag => "su_user-success" }
  }
}

filter {
  if "authlog_logind" in [tags]{
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{LOGINDSESNEW}'} add_tag => "logind_session-opened" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{LOGINSESOPEN}'} add_tag => "login_session-open" }
  }
}

filter {
  if "authlog_systemd" in [tags]{
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{SYSTEMDLOGIN}' } add_tag => "systemd_session-opened" }
  }
}
# CRON tab is very noisy but may show persistance attempt, knowing which user (if not root) scheduled and when is helpful
filter {
  if "authlog_cron" in [tags]{
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{CRONSTART}' } add_tag => "cron_session-opened" }
    grok{ patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{CRONSTOP}' } add_tag => "cron_session-closed" }
  }
}
# Grouping all account changes under a single tag/filter to allow IAM dashboards
filter {
  if "authlog_account" in [tags] {
    grok {patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{GROUPADD}'} add_tag => "account_modification-mgrp" }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{GROUPADD2}'} add_tag => "account_modification-mgrp2" }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{NEWGROUP}'} add_tag => "account_modification-ngrp" }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{NEWUSER}'} add_tag => "account_modification-nusr"  }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{MODUSER}'} add_tag => "account_modification-musr"  }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{MODUSER2}'} add_tag => "account_modification-musr2" }
    grok { patterns_dir => ["/opt/seld/conf/patterns"] match => {'logdata' => '%{PWDCHANGE}'} add_tag => "account_modification-pwd" }
  }
}

#  Deidentification filters create tags to define which ruby modules will be used for deidentification, keeping things modular

# script based, define the address field to be parsed by the Ruby script
filter {
  if [source.ip] or [source_host]{
    mutate{
      add_tag => "valid_src"
    }
  }
  if [user.name] {
    mutate{
      add_tag => "valid_uname"
    }
  }
  if [host.name] {
    mutate{
      add_tag => "valid_compname"
    }
  }
  # File paths may contain sensitive data, create tag to trigger additional ruby module processing
  if [file.path] {
    mutate {
      add_tag => "valid_filepath"
    }
  # Certain event logs may contain more than one instance of a username needing deidentification, 
  # tag will be added during the inital parsing, use tag existance to trigger additional processing via custom ruby module
  }if [user.name1] {
    mutate {
      add_tag => "check_multiuser"
    }
  }

  # Sensitive data fields also need to be parsed, these include mo
  # When there is a vaild IP address in the logs, proceed with the ruby module to test and deidentify as required
  if "valid_src" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/ip_port_name_deident_ecs-v1.rb"
      script_params => {
        "ipaddressfield" => "source.ip"
        "portnumberfield" => "source.port"
        "hostnamefield" => "host.name"
        "usernamefield" => "user.name"
        "sourcehostnamefield" => "source.host.name"
        "source_hostfield" => "source_host"
      }
    }
  }
  # When there is no valid IP address but usernames and/ computer names were observed, proceed with the ruby module tailored to user or computer name deidentification
  if ("valid_uname" in [tags] or "valid_compname" in [tags]) and  "valid_src" not in [tags]{
    ruby {
      path => "/opt/seld/conf/modules/name_only_deident_ecs-v1.rb"
      script_params => {
        "usernamefield" => "user.name"
        "hostnamefield" => "host.name"
        }
    }
  }

  if "valid_filepath" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/filepath_deident.rb"
    script_params => {"filepathfield" => "file.path" }
    }
  }

  if "check_multiuser" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/multiuser_deident.rb"
    }
  }

} # End deident filtering


###################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## File output section #############################################################

  # unprocessed logs identifes events for which no program based conditional processing identified. 
  # Additional general tags like host_name may still result in a very basic deidentification taking place but the contents 
  # of this file should be reviewed to see what sensitive data may warrant parser development or dropping the events
  if "authlog_unprocessed" in [tags] {
    file { path => "/opt/seld/debuglogs/auth-unprocessed.log" 
      codec => line { format => '%{[message]}' }      
    }
  }

  # sshd logs ( test for auth first, then try to alamagamate the sources to limit printing variants)
  # program_category-detail code
  # Tag legend:  ivu  invalid user,  ivu2 additional log message reporting invalid user  ivu* would get all invalid users;   pwd is password related, pky  public key;
  #              ipu  reports IP and username for both failed & successful, corner case logs;  session-opened/closed  informational logs that must be deidentifited
  #              session time and date are very helpful in investigations.  -ip catch corner cases where the IP info is included
  #
  if "authlog_sshd" in [tags] {   
    if "sshd_authentication-ivu" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Invalid user %{user.name} from %{source.ip} port %{source.port}'  }
      } 
    } else if "sshd_authentication-ivu0" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"                                                                                                      
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Invalid user  from %{source.ip} port %{source.port}'  }  
      }
    } else if "sshd_authentication-ivu1" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"                                                                                                      
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: invalid_userauth_request%{gd_1}user %{user.name}%{gd_2}'  }  
      }
    } else if "sshd_authentication-ivu2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:{gd_1} invalid user %{user.name} from %{source.ip} port %{source.port}%{gd_2}'  }  
      } 
    } else if "sshd_authentication-du" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Disconnected from %{wd_1} user %{user.name} %{source.ip} port %{source.port}%{gd_1}'  }  
      } 
    } else if "sshd_authentication-rst" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Connection reset by authenticating user %{user.name} %{source.ip} port %{source.port}%{gd_1}' }  
      } 
    } else if "sshd_authentication-rst2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Connection reset by %{source.ip} port %{source.port}%{gd_1}' }  
      }
    } else if "sshd_authentication-ipu" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
          codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}authentication failure%{gd_2}ruser= rhost=%{source_host} user=%{user.name}'  }  
      }
    } else if "sshd_authentication-ipo" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
          codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}authentication failure%{gd_2}ruser= rhost=%{source_host}'  }  
      }
    } else if "sshd_authentication-hst1" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: PAM%{gd_1}failures;%{gd_2}ruser= rhost=%{source.host.name}'  }  
      }
    } else if "sshd_authentication-hst2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: PAM%{gd_1}failures;%{gd_2}ruser= rhost=%{source.host.name} user=%{user.name}'  }  
      }
    } else if "sshd_authentication-pwd" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1} password for %{user.name} from %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_authentication-pwd2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Failed%{gd_1} user %{user.name} from %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_authentication-pwd3" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: password check failed for user (%{user.name})'  }  
      }
    } else if "sshd_authentication-pwd4" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: pam_succeed_if%{gd_1} user "%{user.name}"'  }  
      }
    } else if "sshd_authentication-rev" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: reverse mapping%{gd_1}for node-name-redacted.%{domain}.%{tld} [%{source.ip}]%{gd_2}$'  }  
      }
    } else if "sshd_authentication-rev2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}string from %{source.ip} %{source.port}$'  }  
      }
    } else if "sshd_authentication-pky" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1} publickey for %{user.name} from %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_session-opened" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}sshd:session%{gd_2}opened for user %{user.name}%{gd_3}'  }  
      }
    } else if "sshd_session-closed" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}sshd:session%{gd_2}closed%{gd_3}user %{user.name}'  }  
      }
    } else if "sshd_session-closed-ip" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Disconnected from user %{user.name} %{source.ip} port %{source.port}'  }  
      }
    } else if "sshd_session-closed-ip2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}Received disconnect%{gd_2}%{source.ip} port %{source.port}%{gd_3}'  }  
      }
    } else if "sshd_session-closed-ip3" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}closed by %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_session-closed-ip4" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}closed by authenticating user %{user.name} %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_session-closed-ip5" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Connection closed%{gd_1}user %{user.name} %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_session-closed-ip6" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: Disconnected from %{source.ip} port %{source.port}%{gd_1}'  }  
      }
    } else if "sshd_ioa-error" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: ssh_dispatch_run_fatal:%{GREEDYDATA:gd_1}%{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_ioa-error2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}differ for %{source.ip} port %{source.port}%{gd_2}'  }  
      }
    } else if "sshd_ioa-error3" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: error:%{gd_1} user %{user.name} from %{source.ip} port %{source.port}%{gd_2}$'  }  
      }
    } else if "sshd_ioa-error4" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: error: maximum%{gd_1} for %{user.name} from %{source.ip} port %{source.port}%{gd_2}$'  }  
      }  
    } else if "sshd_nodeident" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}'  }  
      }
    } else {
      file{ path => "/opt/seld/debuglogs/deident-linuxauth-review.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}'}
      }
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}'}
      } 
    } 
  } # end of SSHD
  # Sudo logs 
  else if "authlog_sudo" in [tags] {
    if "sudo_session-closed" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}sudo:session%{gd_2}closed for user %{sudo_user}'}    
      }
    } else if "sudo_session-opened" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}sudo:session%{gd_2}opened for user %{sudo_user} by %{user.name}(u%{gd_3}'}    
      }
    } else if "sudo_session-opened2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}sudo:session%{gd_2}opened for user %{sudo_user} by (u%{gd_3}'}    
      }
    } else if "sudo_command" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}: %{user.name} :%{gd_1}PWD=%{file.path} ; USER=%{sudo_user} ; COMMAND=%{sudo_cmd}'}    
      }
    } else if "sudo_authentication-failure" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}authentication failure; logname=%{user.name}%{gd_2}ruser=%{user.name1}%{gd_3} user=%{user.name2}'}    
      }
    } else if "sudo_authentication-error" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}sudo:auth%{gd_2}open /%{gd_3}'}    
      }
    } else if "sudo_authentication-failure2" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}authentication failure; logname= %{gd_2}ruser=%{user.name}%{gd_3}user=%{user.name2}'}    
      }
    } else if "sudo_authentication-failure3" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}identify password for [%{user.name}]'}    
      }
    } else if "su_authentication-success" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}: pam_unix(sudo:session%{gd_1}user %{user.name}(%{ns_1} by %{user.name1}%{gd_2}'}    
      }
    } else if "su_session-open" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}: pam_unix(su-l%{gd_1}user %{user.name} by %{user.name1}(%{gd_2}'}    
      }
    } else if "su_session-open1" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}: pam_unix(su-l%{gd_1}user %{user.name}(%{gd_2}by %{user.name1}(%{gd_3}'}    
      }
    } else if "su_session-close" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}su-l:session%{gd_2}closed for user %{user.name}'}    
      }
    } else if "su_user-success" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}: (to %{user.name}) %{user.name1} %{gd_1}'}    
      }
    } else {
      file { path => "/opt/seld/debuglogs/deident-linuxauth-review.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}' }      
      }
      file { path => "/opt/seld/deidentlogs/deident-linuxauth.log" 
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}' }      
      }
    }
  } # end of sudo logs
  # systemd-login sessions record user name in new sessions but all other events identified contained no sensitive information
  else if "authlog_logind" in [tags] {
    if "logind_session-opened" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: New%{gd_1}user %{user.name}.'  }
      }
    } else if  "login_session-open" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}user %{user.name} by%{gd_2}'  }
      }
    } else {
      file{ path => "/opt/seld/debuglogs/deident-linuxauth-review.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}'  }
      }
      file{ path => "/opt/seld/deident/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}'  }
      }

    } 
  } #end systemd-logind logs
  # systemd sessions also record user name in new sessions, no other events identified but must remove the PID to retain log formatting
  else if "authlog_systemd" in [tags] {
    if "systemd_session-opened" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}for user %{user.name}%{gd_2}'  }
      }
    } else {
      file{ path => "/opt/seld/debuglogs/deident-linuxauth-review.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}'  }
      }
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}'  }
      }
    }   
  } #end systemd-logind logs
  # cron sessions also record user name in new sessions, typically root so nothing to deidentify. 
  else if "authlog_cron" in [tags] {
    if "cron_session-opened" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}opened for user %{user.name}%{gd_2}'  }
      }
    } else if "cron_session-closed" in [tags] {
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{gd_1}closed for user %{user.name}'  }
      }
    } else {
      file{ path => "/opt/seld/debuglogs/deident-linuxauth-review.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}'  }
      }
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}:%{logdata}'  }
      }
    }
  } #end cron events
  # Account change events have user and group names in the logs, as well as sensitive text like home directory locations
  else if "authlog_account" in [tags] {
    if "account_modification-mgrp" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1} /etc/group: name=%{group.name},%{gd_2}'}
      } 
    }else if "account_modification-mgrp2" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1} /etc/gshadow: name=%{group.name}$'}
      }
    } else if "account_modification-ngrp" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: new group: name=%{user.name}%{gd_1}'}
      }
    } else if "account_modification-nusr" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: new user: name=%{user.name}%{gd_1}home=%{file.path}%{gd_2}'}
      }
    } else if "account_modification-musr" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => "%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: add '%{user.name}' %{gd_1}group '%{group.name}'$"}
      }
    } else if "account_modification-musr2" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => "%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]: change user '%{user.name}'%{gd_1}" }
      }
    } else if "account_modification-pwd" in [tags]{
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{gd_1}password changed for %{user.name}' }
      }
    } else {
      file{ path => "/opt/seld/debuglogs/deident-linuxauth-review.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}' }
      }
      file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}' }
      }
    }
  } #end Account changes
  #  All remaining logs default to deidentifed log but have a searchable string added to the output
  else {
    file { path => "/opt/seld/debuglogs/deident-linuxauth.log" 
      codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}__review-default__' }           
    }
    file{ path => "/opt/seld/deidentlogs/deident-linuxauth.log"
        codec => line { format => '%{syslogts} %{host.name} %{[process][name]}[%{[process][pid]}]:%{logdata}' }
    }
  }
   
# End of output filter
}