# Author Doug Leece  dleece @ firstfiretech dot ca 

# April/06/2023  Read JSON Lines orginal source file into Elastic Index
#
# Reads original Windows events processed with the same drop conditions applied to deidentified data
# Remove any remaining records dropped in Sensitive Terms Removal process, search by record ID
#
# Resulting record counts for a given raw input should match exactly for valid control testing
# The Kibana platform should be used for content validation as row count is only one metric
#


# Modify path based on SELD home location, /opt/seld by default
input {
        file {
                path => "/opt/seld/rawlogs/drop-processed-windowsevt.json*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/winevt_processing.log"
                exit_after_read => true
                sincedb_path => "/var/tmp/winevt_tracker"
                sincedb_clean_after => 0.00135
        }
} # End input

#####################################################################################################################################

# Filter notes, & import pattern files 
# Convert JSON doc into field based data
filter { 
  json { source => "message"  
          target => "winlog"
          add_tag => "_json_parsed_success"
  }
}

# Modify or remove collection artifacts: 
filter{

  # Remove the chance the log ingestion node contributes a hostname to the dataset that overlaps with target data
  mutate { replace => {"[host][name]" => "3DPLoaderNode"} }
  mutate { add_field => { "[event][kind]" => "event"}}
  mutate { add_field => { "[event][outcome]" => "%{[winlog][outcome]}"}}
  #mutate { add_field => { "[event][type]" => "%{[winlog][opcode]}"}}
  # Convert Windows evtx opcode to lowercase to match ECS
  #mutate { lowercase => [ "[event][type]" ]}    
  
}  # End collection artifact filter


# Correct timestamp settings: 
filter {
  # Copy current timestamp to new field event.created
  mutate { add_field => { "[event][created]" => "%{@timestamp}"}}

  # move original event time in the deidentified log to the timestamp read by Kibana
  if [winlog][time_created] {
      date{
        match => ["[winlog][time_created]", "yyyy-MM-dd'T'HH:mm:ss'.'SSSZ"]
        target => "@timestamp"
        add_tag => "timestamp_original"
      }
  }
  # Option to clean up time_created field once this works
  #
}  # End timestamp processing filter

##########################       Data transformation for Elastic indexing               ##############################################

# Some Windows event have the dash (-) character in place of a port value,   replacing with 0
filter{
  if [winlog][event_data][IpPort] =~ /-/ {
    mutate{ add_tag => "dashport"}
    # Convert dash to string 0, then convert string to int
    mutate { replace => { "[winlog][event_data][IpPort]" => "0" } }
    #mutate { mutate { convert => { "[winlog][event_data][IpPort]" => "integer"}}}
  }
  # Change the 0 string to an integer 0
  if [winlog][event_data][IpPort] =~ /^0$/ {
    mutate{ add_tag => "stringport"}
    mutate { convert => { "[winlog][event_data][IpPort]" => "integer"}}
  }
} # End data preprocessor filter




##########################       Windows EVTx XML field conversions to ECS Format       ##############################################

filter {
  # Windows Event ID to event.code
  mutate { add_field => {"[event][code]" => "%{[winlog][event_id]}"} }
  # Provider name 
  mutate { add_field => {"[event][provider]" => "%{[winlog][provider_name]}"} }
  # Mapping ECS Security module field types - won't enclude Elastic specific enrichment
  # https://www.elastic.co/guide/en/beats/winlogbeat/current/exported-fields-security.html 
  if [winlog][event_data][LogonType] {
    mutate {add_field => {"[winlog][logon][type]" => "%{[winlog][event_data][LogonType]}" }}
  }
  if [winlog][event_data][TargetLogonId] {
    mutate {add_field => {"[winlog][logon][id]" => "%{[winlog][event_data][TargetLogonId]}" }}
  }
  # Two fields specific to Failed logins
  if [winlog][event_id] == "4625" and [winlog][event_data][Status] {
    mutate {add_field => {"[winlog][logon][failure][status]" => "%{[winlog][event_data][Status]}" }}
  }
  if [winlog][event_id] == "4625" and [winlog][event_data][SubStatus] {
    mutate {add_field => {"[winlog][logon][failure][sub_status]" => "%{[winlog][event_data][SubStatus]}" }}
  }
  # Requires powershell script block logging to be enabled
  if [winlog][channel] == "Microsoft-Windows-PowerShell/Operational" {
    mutate {add_field => {"[powershell][file][script_block_id]" => "%{[winlog][event_data][ScriptBlockId]}" }}
    mutate {add_field => {"[powershell][file][script_block_text]" => "%{[winlog][event_data][ScriptBlockText]}" }}
  }



} # END ECS field mapping 


#####################################  Enrichment & Data Modification  (Supports debugging ) ################################################################

filter {
  # computer likely always in record
  if [winlog][computer_name] or [winlog][event_data][WorkstationName] or [winlog][event_data][Workstation]{
    mutate { add_tag => "winevt_computer" }
  }
  # most winevt records will have username attributes
  if [winlog][event_data][TargetUserName] or [winlog][event_data][SubjectUserName] or [winlog][event_data][ServiceName] or [winlog][event_data][SamAccountName] {
    mutate { add_tag => "winevt_user"}
  } 
  # Windows records a lot of domain information
  if [winlog][event_data][TargetDomainName] or [winlog][event_data][SubjectDomainName] {
    mutate { add_tag => "winevt_domain"}
  }
  # Windows records may contain sensitive IP addresses, loopback and blanks excluded in module
  if [winlog][event_data][IpAddress] {
    mutate { add_tag => "winevt_ipaddress"}
  }
  # SID may be considered a sensitive field ( module tests and ignores well-known, deidents domain sids & rids)
  if [winlog][event_data][SubjectUserSid] or [winlog][event_data][TargetUserSid] or [winlog][event_data][ServiceSid]{
    mutate { add_tag => "winevt_sid"}
  }
  # Privilege list, no deidentification needed just feild clean up
  if [winlog][event_data][PrivilegeList] {
    mutate{ gsub => ["[winlog][event_data][PrivilegeList]", "[\\\t]", ""]}
    mutate{ gsub => ["[winlog][event_data][PrivilegeList]", "[\\\n]", " "]}
  }
  # confirm there is a message field that needs parsing becasue regex is expensive
  if [winlog][message]{
    mutate { add_tag => "winevt_msg"}
  }
  # Check for channel name powershell operational
  if [winlog][channel] == "Microsoft-Windows-PowerShell/Operational"{
    mutate { add_tag => "winevt_psoper"}
  }
  # process command line monitoring may disclose user name paths, 0.005% in sample - LS processing up front
  if [winlog][event_id] == "4688" and ([winlog][event_data][NewProcessName] =~ /^\w:\\Users\\.*/ or [winlog][event_data][ParentProcessName] =~ /^\w:\\Users\\.*/ ) {
    mutate { add_tag => "winevt_procuserdata"}
  }
  if [winlog][event_id] == "4688" and [winlog][event_data][CommandLine] =~ /^.*\\Users\\.*/  {
    mutate { add_tag => "winevt_cmduserdata"}
  }
  # Additional processing for account creation and modification events that may contain home directory data
  if [winlog][event_id] == "4720"  {
    mutate { add_tag => "winevt_usermodify"}
  }
  # Tag group changes for additional processing
  if [winlog][event_id] == "4732"  {
    mutate { add_tag => "winevt_groupmodify"}
  }
}


######################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## Elastic output section ############################################################


## Uncomment to enable persistance in an elastic search instance of the original data
elasticsearch {
    hosts => ["Your_Elastic_host:9200"]
    index => "Your_Elastic_Indexname"
    cacert => "/etc/logstash/Your_Elastic_host.crt"
    ssl_certificate_verification => false
    ssl => true
    user => "elastic"
    password => "your_Elastic_Secret"
  }


# End of output filter
}