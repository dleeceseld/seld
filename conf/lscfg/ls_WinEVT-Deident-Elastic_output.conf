# Author Doug Leece  dleece @ firstfiretech dot ca 

# April/05/2023  Read JSON Lines deidentified source file into Elastic Index
#
# Windows Event logs have been deidentied using winlog beat XML formatting and custom parsing
# written for the windows event log message field.  Output format is JSON lines, unfortunately
# the field names provided by winlogbeat are flat and do not map directly to ECS 8 
#
# Extracted field names aligned to Elastic Common Schema
# https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html



# Modify path based on appliance build
input {
        file {
                path => "/opt/seld/deidentlogs/deident-windowsevt.json-poststr*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/winevt_processing.log"
                exit_after_read => true
                sincedb_path => "/opt/seld/tmp/winevt_tracker"
                sincedb_clean_after => 0.00135
        }
} # End input

#####################################################################################################################################

# Filter notes, & import pattern files 
# Convert JSON doc into field based data
filter { 
  json { source => "message"  
          target => "winlog"
          add_tag => "_json_parsed_success"
  }
}

# Modify or remove collection artifacts: 
filter{
#  No need to hide the use of elastic since this is a 3DP program
#  mutate {
#    remove_field => ["[host]","[log]","[@version]","[message]","[ecs]","[event]"]
#  }

  # Remove the chance the log ingestion node contributes a hostname to the dataset that overlaps with target data
  mutate { replace => {"[host][name]" => "3DPLoaderNode"} }
  mutate { add_field => { "[event][kind]" => "event"}}
  mutate { add_field => { "[event][outcome]" => "%{[winlog][outcome]}"}}
  #mutate { add_field => { "[event][type]" => "%{[winlog][opcode]}"}}
  # Convert Windows evtx opcode to lowercase to match ECS
  #mutate { lowercase => [ "[event][type]" ]}    
  
}  # End collection artifact filter


# Correct timestamp settings: 
filter {
  # Copy current timestamp to new field event.created
  mutate { add_field => { "[event][created]" => "%{@timestamp}"}}

  # move original event time in the deidentified log to the timestamp read by Kibana
  if [winlog][time_created] {
      date{
        match => ["[winlog][time_created]", "yyyy-MM-dd'T'HH:mm:ss'.'SSSZ"]
        target => "@timestamp"
        add_tag => "timestamp_original"
      }
  }
  # Option to clean up time_created field once this works
  #
}  # End timestamp processing filter

##########################       Data transformation for Elastic indexing               ##############################################

# Some Windows event have the dash (-) character in place of a port value,   replacing with 0
filter{
  if [winlog][event_data][IpPort] =~ /-/ {
    mutate{ add_tag => "dashport"}
    # Convert dash to string 0, then convert string to int
    mutate { replace => { "[winlog][event_data][IpPort]" => "0" } }
    #mutate { mutate { convert => { "[winlog][event_data][IpPort]" => "integer"}}}
  }
  # Change the 0 string to an integer 0
  if [winlog][event_data][IpPort] =~ /^0$/ {
    mutate{ add_tag => "stringport"}
    mutate { convert => { "[winlog][event_data][IpPort]" => "integer"}}
  }
} # End data preprocessor filter




##########################       Windows EVTx XML field conversions to ECS Format       ##############################################

filter {
  # Windows Event ID to event.code
  mutate { add_field => {"[event][code]" => "%{[winlog][event_id]}"} }
  # Provider name 
  mutate { add_field => {"[event][provider]" => "%{[winlog][provider_name]}"} }
  # Mapping ECS Security module field types - won't enclude Elastic specific enrichment
  # https://www.elastic.co/guide/en/beats/winlogbeat/current/exported-fields-security.html 
  if [winlog][event_data][LogonType] {
    mutate {add_field => {"[winlog][logon][type]" => "%{[winlog][event_data][LogonType]}" }}
  }
  if [winlog][event_data][TargetLogonId] {
    mutate {add_field => {"[winlog][logon][id]" => "%{[winlog][event_data][TargetLogonId]}" }}
  }
  # Two fields specific to Failed logins
  if [winlog][event_id] == "4625" and [winlog][event_data][Status] {
    mutate {add_field => {"[winlog][logon][failure][status]" => "%{[winlog][event_data][Status]}" }}
  }
  if [winlog][event_id] == "4625" and [winlog][event_data][SubStatus] {
    mutate {add_field => {"[winlog][logon][failure][sub_status]" => "%{[winlog][event_data][SubStatus]}" }}
  }
  # Requires powershell script block logging to be enabled
  if [winlog][channel] == "Microsoft-Windows-PowerShell/Operational" {
    mutate {add_field => {"[powershell][file][script_block_id]" => "%{[winlog][event_data][ScriptBlockId]}" }}
    mutate {add_field => {"[powershell][file][script_block_text]" => "%{[winlog][event_data][ScriptBlockText]}" }}
  }

  # Some additional mapping needed to normalize certain Windows events so they can be searchable with a singular view
  # Change the default hostname back to the relevant Windows computer
  if [winlog][computer_name]{
      mutate { replace => {"[host][name]" => "%{[winlog][computer_name]}"} }
  }
  # Defning Source IP if it exists, Windows often doesn't always collect the IP
  if [winlog][event_data][IpAddress] =~ /\S+/ {
    mutate {add_field => {"[source][ip]" => "%{[winlog][event_data][IpAddress]}"}}
  }


} # END ECS field mapping 





######################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## Elastic output section ############################################################

# Uncomment to enable persistance in an elastic search instance of the original data
elasticsearch {
    hosts => ["Your_Elastic_host:9200"]
    index => "Your_Elastic_Indexname"
    cacert => "/etc/logstash/Your_Elastic_host.crt"
    ssl_certificate_verification => false
    ssl => true
    user => "elastic"
    password => "your_Elastic_Secret"
  }


# End of output filter
}