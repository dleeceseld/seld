# Author Doug Leece  dleece @ firstfiretech dot ca 

# April/06/2023  Read JSON Lines orginal source file into Elastic Index
#
# Include all drop rules defined in deidentification processing to ensure similar record count
# Remove any remaining records dropped in Sensitive Terms Removal process, search by record ID
#




# Modify path based on SELD home location, /opt/seld by default
input {
        file {
                path => "/opt/seld/rawlogs/winevts.jsonl*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/winevt_processing.log"
                exit_after_read => true
                sincedb_path => "/opt/seld/winevt_tracker"
                sincedb_clean_after => 0.00135
        }
} # End input

#####################################################################################################################################

# Filter notes, & import pattern files 
# Convert JSON doc into field based data
filter { 
  json { source => "message"  
          target => "winlog"
          add_tag => "_json_parsed_success"
  }
}

# Modify or remove collection artifacts: 
filter{
  mutate {
    remove_field => ["[host]","[log]","[@version]","[message]","[ecs]","[event]"]
  }  
}  # End collection artifact filter


# Correct the timestamp
filter {
  if [winlog][time_created] {
      date{
        match => ["[winlog][time_created]", "yyyy-MM-dd'T'HH:mm:ss'.'SSSZ"]
        target => "@timestamp"
        add_tag => "timestamp_original"
      }
  }
}  # End timestamp processing filter


##################################  Drop Filtering from DeIdentification Process  ####################################################
filter {
  
  # Do not collect log off events
  if [winlog][event_id] == "4634" { drop {}  }
  # Auditing policy changes is generating ~4% of all events, capturing OS made changes like patching updates,
  # Filter out Windows Updates
  if [winlog][provider_guid] == "{945A8954-C147-4ACD-923F-40C45405A658}"{ drop{} }
  # Windows firewall messages , very high volume
  if [winlog][event_id] == "7036" and [winlog][provider_guid] == "{555908d1-a6d7-4695-8e1e-26931d2012f4}" {
    drop {}
  }
  # Drop this event to allow all other policy changes to be captured
  if [winlog][event_id] == "4907" and [winlog][event_data][ObjectType] == "File"  { drop {}  }
  # Drop DCOM permission events 10016 
  if [winlog][provider_name] == "Microsoft-Windows-DistributedCOM" and ([winlog][event_id] == "10016" ){drop {} }
  # Drop computer account changes -- assumed admin action
  if [winlog][event_id] == "4742" { drop {}  }
  # Ignore system shutdown events
  if [winlog][provider_guid] == "{b0aa8734-56f7-41cc-b2f4-de228e98b946}" and [winlog][event_id] == "1074" { drop{} }
  # Ignore computer account password changes
  if [winlog][provider_name] == "NETLOGON" and [winlog][event_id] == "5823" { drop{} }  
  # Drop NTP informational messages
  if [winlog][channel] == "System" and ( [winlog][event_id] == "37" or [winlog][event_id] == "35" ) {
    drop{}
  }
  # Drop kernel messages related to software updates
  if [winlog][provider_guid] == "{a68ca8b7-004f-d7b6-a698-07e2de0f1f5d}" and  [winlog][event_id] == "16"  {
    drop{}
  }
  # Drop Group policy application events 
  if [winlog][provider_name] == "Microsoft-Windows-GroupPolicy" and ([winlog][event_id] == "1500" or [winlog][event_id] == "1501" or [winlog][event_id] == "1502" ){
    drop {}
  }
  # Drop events related to credential manager access, ~3% of all events
  if [winlog][provider_guid] == "{54849625-5478-4994-a5ba-3e3b0328c30d}" and ([winlog][event_id] == "5379" or [winlog][event_id] == "4695" or [winlog][event_id] == "5381"  or [winlog][event_id] == "5382"  ) { drop {}  }
  # Drop powershell on/off legacy logging since script block logging is enabled
  if [winlog][channel] == "Windows PowerShell" { drop {} }
  
  # Intented to detect enumerating local group membership 4799 or users 4798. Very high false positive rate -- drop all but net
  if [winlog][event_id] == "4799" and [winlog][event_data][CallerProcessName] !~ /^\w:\\Windows\\System32\\net1.exe/   { 
    drop {}  
  }
  if [winlog][event_id] == "4798" and [winlog][event_data][CallerProcessName] !~ /^\w:\\Windows\\System32\\net1.exe/   { 
    drop {}  
  }
  # Informational system messages
  if [winlog][channel] == "System" and ([winlog][event_id] == "1056" or [winlog][event_id] == "3260" or [winlog][event_id] == "5774" ) {
    drop {}
  }
  if [winlog][channel] == "System" and ([winlog][event_id] == "4200" or [winlog][event_id] == "3260" or [winlog][event_id] == "5774" ) {
    drop {}
  }
  #
  if [winlog][channel] == "System" and ([winlog][event_id] == "10154" or [winlog][event_id] == "1014" or [winlog][event_id] == "6011" )  {
    drop { }
  }
  if [winlog][channel] == "System" and ([winlog][event_id] == "16" or [winlog][event_id] == "4096" or [winlog][event_id] == "4097" )  {
    drop { }
  }
  # Informational security messages 
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4719" or [winlog][event_id] == "5058" or [winlog][event_id] == "4797" )  {
    drop { }
  }
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4694" or [winlog][event_id] == "4692" or [winlog][event_id] == "4738" )  {
    drop { }
  }
  if [winlog][channel] == "Security" and ([winlog][event_id] == "4741" or [winlog][event_id] == "4739" or [winlog][event_id] == "5061"  or [winlog][event_id] == "5059" )  {
    drop { }
  }
  # user desktop customization info messages
  if [winlog][channel] == "Application" and ([winlog][event_id] == "5" or [winlog][event_id] == "1014" or [winlog][event_id] == "5774" )  {
    drop { }
  }
  # user desktop customization info messages
  if [winlog][channel] == "Application" and ([winlog][event_id] == "455" or [winlog][event_id] == "4625" or [winlog][event_id] == "1001" )  {
    drop { }
  }
}


######################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## Elastic output section ############################################################

if "_json_parsed_success" in [tags] {
    file { path => "/opt/seld/rawlogs/drop-processed-windowsevt.json" 
      codec => line { format => '%{[winlog]}' }      
    }
  }


## Uncomment to enable persistance in an elastic search instance of the original data, 
# change index name and created as needed (see SELD git hub)
#elasticsearch {
#    hosts => ["Your_Elastic_host:9200"]
#    index => "Your_Elastic_Indexname"
#    cacert => "/etc/logstash/Your_Elastic_host.crt"
#    ssl_certificate_verification => false
#    ssl => true
#    user => "elastic"
#    password => "your_Elastic_Secret"
#  }


# End of output filter
}