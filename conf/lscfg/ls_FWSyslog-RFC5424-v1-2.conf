# Author Doug Leece  dleece @ firstfiretech dot ca 
# Feb 23/2023 Ingestion for rfc5424 syslog events and testing for PFSense message processing modules.
# Apr 7/2023  File tracking and output locations,  moving all under /opt/seld/
#
#
# Currently the path is hardcoded but can uses a wildcard after "fwsyslog.log"  to enable ingestiong 
# of any RFC5424 formatted log files in the defined directory, allowing from different systems and different
# naming strategies 
#
# Built using GROK patterns published by Elasticsearch
# https://github.com/logstash-plugins/logstash-patterns-core/blob/main/patterns/ecs-v1/grok-patterns
#
# Extracted field names aligned to Elastic Common Schema
# https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html



# Added for repeat testing,  may not be needed for release ()
input {
        file {
                path => "/opt/seld/rawlogs/fwsyslog.log*"
                mode => "read"
                file_completed_action => "log"
                file_completed_log_path => "/opt/seld/tmp/fwsyslog_processing.log"
                exit_after_read => true
                sincedb_path => "/opt/seld/tmp/fwsyslog_tracker"
                sincedb_clean_after => 0.00135
        }
      
} # End input

############################################################################

# Filtering steps, currently no requirement for custom pattern files, GROK builtins used

filter{
  grok{
    match => { 'message' => '^<%{POSINT:pri}>%{POSINT:version}%{SPACE}%{TIMESTAMP_ISO8601:[event][created]}%{SPACE}%{IPORHOST:host_name_orig}%{SPACE}%{WORD:[program][name]}%{SPACE}%{POSINT:[program][pid]}%{SPACE}-%{SPACE}-%{SPACE}%{GREEDYDATA:[rule][FWEvent]}$' }
  }
}

# overwrite the hostname from the log processor with the hostname in log source
filter {
  mutate{ rename =>{ "host_name_orig" => "[host][name]" }  }
}

# Add tags based on fields
# Extract hostname, and rule event portion of the message
filter {
  if [host][name] {
     mutate { add_tag => "fwsyslog_host"} 
  }
  if [progam][name] == "filterlog" {
    mutate { add_tag => "fwsyslog_filterlog"} 
  }
  if [rule][FWEvent] {
    mutate { add_tag => "fwsyslog_FWEvent"}
  }
}

# Correct the timestamp  - PFS sense uses 8601 format with microsecond precision, Logstash truncates to milli
filter {
  if [event][created] {
      date{
        match => ["[event][created]","ISO8601"]
        target => "@timestamp"
        add_tag => "timestamp_original"
      }
  }
}


filter{
  if "fwsyslog_host" in [tags] and "fwsyslog_FWEvent" in [tags] {
    ruby {
      path => "/opt/seld/conf/modules/ip_port_name_deident-pfsfw.rb"
      script_params => { 
        "hostnamefield" => "[host][name]"
        "ruleeventfield" => "[rule][FWEvent]"
      }
    }
  }
}
###################################################################################################################################
output {

# Comment out if debugging not required ( improves performance marginally and but still allows logstash stdout events to be observed)
  stdout { codec => rubydebug }

################################################## File output section #############################################################
if "fwsyslog_host" in [tags] and "fwsyslog_FWEvent" in [tags] {
    file { path => "/opt/seld/deidentlogs/deident-fwsyslog_rfc5424.log" 
      # need to recreate the formatting based on extracted fields, event api doesn't rewrite message field directly (how inconvenient)
      codec => line { format => '<%{pri}>%{version} %{[event][created]} %{[host][name]} %{[program][name]} %{[program][pid]} - - %{[rule][FWEvent]}' }      
    }
  }

# End of output filter
}